small_list = [3, 1, 4, 5, 2, 5, 3]
big_list = [3, 5, -2, -1, -3, 0, 1, 4, 5, 2]
# task 1. Знайдіть всі унікальні елементи в списку small_list
print("task 1\n"
      "Знайдіть всі унікальні елементи в списку small_list")
unique_elements = list(set(small_list))
print(f"Відповідь: {unique_elements}")
print("______________________________________________________________________________________")

# task 2. Знайдіть середнє арифметичне всіх елементів у списку small_list
print("task 2\n"
      "Знайдіть середнє арифметичне всіх елементів у списку small_list")
average = sum(small_list) / len(small_list)
print(f"Відповідь: {average}")
print("______________________________________________________________________________________")

# task 3. Перевірте, чи є в списку big_list дублікати
print("task 3\n"
        "Перевірте, чи є в списку big_list дублікати")
duplicates = len(big_list) != len(set(big_list))
print(f"Відповідь: {duplicates}, якщо True - в списку є дублікати")
print("______________________________________________________________________________________")

base_dict = {'contry':'Ukraine', 'continent': 'Europe', 'size': 123}
add_dict = {"a":1, "b":2, "c":2, "d":3, 'size': 12}
# task 4. Знайдіть ключ з максимальним значенням у словнику add_dict
print("task 4\n"
      "Знайдіть ключ з максимальним значенням у словнику add_dict")
max_key = max(add_dict, key=add_dict.get)
print(f"Відповідь: {max_key}")
print("______________________________________________________________________________________")
# task 5. Створіть новий словник, в якому ключі та значення будуть
# замінені місцями у заданому словнику
print("task 5\n"
      "Створіть новий словник, в якому ключі та значення будуть замінені місцями у заданому словнику")
reversed_dict = dict(map(lambda item: (item[1], item[0]), add_dict.items()))
print(f"Відповідь: {reversed_dict}")
print("______________________________________________________________________________________")


# task 6. Об'єднайте два словника base_dict та add_dict  в новий словник sum_dict
# Якщо ключі збігаються, то перетворіть значення в строку та об'єднайте їх
sum_dict = {}
print("task 6\n"
      "Об'єднайте два словника base_dict та add_dict  в новий словник sum_dict"
      "Якщо ключі збігаються, то перетворіть значення в строку та об'єднайте їх")
common_keys = set(base_dict.keys()).intersection(set(add_dict.keys()))
sum_dict = {**base_dict, **add_dict}
sum_dict.update({key: f"{base_dict[key]}-{add_dict[key]}" for key in common_keys})
print(f"Відповідь: {sum_dict}")
print("______________________________________________________________________________________")

# task 7.
line = "Створіть множину всіх символів, які входять у заданий рядок"
print("task 7\n"
      "Створіть множину всіх символів, які входять у заданий рядок")
unique_symbols = set(line)
print(f"Відповідь: {unique_symbols}")
print("______________________________________________________________________________________")

# task 8. Обчисліть суму елементів двох множин, які не є спільними
set_1 = {1, 2, 3, 4, 5}
set_2 = {4, 6, 5, 10}
print("task 8\n"
      "Обчисліть суму елементів двох множин, які не є спільними")
sum_of_unique_elements = sum(set_1 ^ set_2)
print(f"Відповідь: {sum_of_unique_elements}")
print("______________________________________________________________________________________")

# task 9. Створіть два списки та обробіть їх так, щоб отримати сет, який
# містить всі елементи з обох списків,  які зустрічаються тільки один раз.
# Наприклад, якщо перший список містить [1, 2, 3, 4], а другий
# список містить [3, 4, 5, 6], то повернутий сет містить [1, 2, 5, 6]

person_list = [('Alice', 25), ('Boby', 19), ('Charlie', 32),
               ('David', 28), ('Emma', 22), ('Frank', 45)]
person_list_2 = [('David', 28), ('Emma', 22), ('Charlie', 32),
                 ('Frank', 45), ('David', 28)]
print("task 9\n"
        "Створіть два списки та обробіть їх так, щоб отримати сет, який"
        "містить всі елементи з обох списків,  які зустрічаються тільки один раз."
        "Наприклад, якщо перший список містить [1, 2, 3, 4], а другий"
        "список містить [3, 4, 5, 6], то повернутий сет містить [1, 2, 5, 6]")
unique_elements = set(person_list) ^ set(person_list_2)
print(f"Відповідь: {unique_elements}")
print("______________________________________________________________________________________")
# task 10. Обробіть список кортежів person_list, що містять ім'я та вік людей,
# так, щоб отримати словник, де ключі - вікові діапазони (10-19, 20-29 тощо),
# а значення - списки імен людей, які потрапляють в кожен діапазон.
# Приклад виводу:
# {'10-19': ['A'], '20-29': ['B', 'C', 'D'], '30-39': ['E'], '40-49': ['F']}
print("task 10\n"
        "Обробіть список кортежів person_list, що містять ім'я та вік людей,"
        "так, щоб отримати словник, де ключі - вікові діапазони (10-19, 20-29 тощо),"
        "а значення - списки імен людей, які потрапляють в кожен діапазон.")
person_list_sorted = sorted(person_list, key=lambda x: x[1])
age_ranges = ['10-19', '20-29', '30-39', '40-49']
age_ranges_for_persons = map(lambda x: age_ranges[(x[1] // 10) - 1], person_list_sorted)
age_dict = dict(zip(age_ranges_for_persons, map(lambda x: (x[0],), person_list_sorted)))
print(f"Відповідь: {age_dict}")
print("______________________________________________________________________________________")
